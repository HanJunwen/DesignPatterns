package abstractfactory;

public class Main {
    /**
     *      抽象工厂模式： 优点：1.抽象工程隔离了具体类的生成，使得客户端不知道什么被创建，
     *                              所有的具体工厂都实现了抽象工厂中定义的公共接口，因此只需要改变具体工厂的实例，就可以在某种程度上改变整个软件系统的行为。
     *                          2.当一个产品族中的多个对象被设计成一起工作时，他能够保证客户端始终只使用同一个产品族中的对象。
     *                    缺点： 添加新的行为时比较麻烦，如果需要添加一个新产品族对象时，需要更改接口及其下所有子类，这必然会带来很大的麻烦。
     *
     *                    使用场景：1.一个系统不应当依赖于产品实例如何被创建、组合和表达的细节，这对于所有类型的工厂模式都是重要的。
     *                              2.系统中又多于一个的产品族，而每次只使用其中某一产品族。
     *                              3.属于同一个产品族的产品将在一起使用，这一约束必须在系统的设计中体现出来。
     *                              4.系统提供了一个产品类的库，所有的产品以同样的接口出现，从而使客户端不依赖于具体的实现
     *                    总结：
     *                          1.抽象工厂模式中主要的优点是在于具体类的隔离，使得客户端不需要知道什么被创建了。其缺点在于增加新的等级产品结构比较复杂，需要修改接口及其所有子类。
     *
     *                      参考资料网址：http://www.cnblogs.com/chenssy/archive/2013/06/03/3114681.html
     * @param args
     */
    public static void main(String[] args) {
        //建立一个纽约的披萨店
        NYPizzaStore nyPizzaStore = new NYPizzaStore();
        Pizza pizza = nyPizzaStore.orderPizza("cheese");
        System.out.println(pizza.name);
    }
}
