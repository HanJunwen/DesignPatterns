package simplyfactory;

public class Main {
    /**
     *      简单工厂模式：
     *              优点：1.提供了专门的工厂类用于创建对象，
     *                    2.根据传入参数的不同，生成不同的实现类，
     *                    3.可以通过配置文件的形式，在不修改任何客户端代码的情况下更换和增加新的具体产品类
     *              缺点：
     *                  1.由于工厂类集中了所有产品的创建逻辑，一旦不能正常工作，整个系统都会受到影响。
     *                  2.使用简单工厂模式将会增加系统中类的个数，在一定程度上增加了系统的复杂度和理解难度。
     *                  3。系统扩展困难，一旦添加新产品就不得不修改工厂逻辑，在产品类型较多时，有可能造成工厂逻辑过于复杂，不利于系统的扩展和维护。
     *                  4.简单工厂模式，由于使用了静态工厂方法，造成了工厂角色无法形成基于继承的等级结构。
     *              使用场景：
     *                  1.工厂类负责创建的对象比较少。
     *                  2.客户端只知道传入工厂类的参数，对于如何创建对象不关心。
     *
     *               总结：
     *                  1.简单工厂模式的要点在于当你需要什么的时候，只需要传入一个正确的参数，就可以拿到想要的类型，不需要去关心创建过程。
     *                  2.简单工厂模式最大的优点在于实现对象的创建和对象的使用分离，但是如果产品过多时，会导致工厂代码非常复杂。
     *               参考网址：http://www.cnblogs.com/chenssy/archive/2013/05/24/3096161.html
     * @param args
     */
    public static void main(String[] args) {
        PizzaStore pizzaStore = new PizzaStore(new SimplyPizzaFactory());
        System.out.println(pizzaStore.orderPizza(""));
    }
}
